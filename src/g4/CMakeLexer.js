// Generated from grammer-antlr4/CMake.g4 by ANTLR 4.13.2
// jshint ignore: start
import antlr4 from 'antlr4';


const serializedATN = [4,0,11,173,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,
4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,
12,2,13,7,13,2,14,7,14,2,15,7,15,1,0,1,0,1,1,1,1,1,2,1,2,5,2,40,8,2,10,2,
12,2,43,9,2,1,3,1,3,4,3,47,8,3,11,3,12,3,48,1,4,1,4,1,4,3,4,54,8,4,1,5,1,
5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,3,6,65,8,6,1,7,1,7,1,7,1,8,1,8,1,8,1,8,5,8,
74,8,8,10,8,12,8,77,9,8,1,8,1,8,1,9,1,9,1,9,3,9,84,8,9,1,9,3,9,87,8,9,1,
10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,5,11,99,8,11,10,11,12,11,
102,9,11,1,11,3,11,105,8,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,13,
1,13,1,13,1,13,5,13,119,8,13,10,13,12,13,122,9,13,1,13,1,13,5,13,126,8,13,
10,13,12,13,129,9,13,1,13,1,13,5,13,133,8,13,10,13,12,13,136,9,13,1,13,1,
13,5,13,140,8,13,10,13,12,13,143,9,13,3,13,145,8,13,1,13,1,13,3,13,149,8,
13,1,13,3,13,152,8,13,1,13,1,13,1,14,1,14,3,14,158,8,14,1,14,4,14,161,8,
14,11,14,12,14,162,1,14,1,14,1,15,4,15,168,8,15,11,15,12,15,169,1,15,1,15,
1,100,0,16,1,1,3,2,5,3,7,4,9,5,11,0,13,0,15,0,17,6,19,0,21,7,23,0,25,8,27,
9,29,10,31,11,1,0,10,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,
6,0,9,10,13,13,32,32,34,35,40,41,92,92,4,0,48,57,59,59,65,90,97,122,2,0,
34,34,92,92,4,0,10,10,13,13,61,61,91,91,2,0,10,10,13,13,3,0,10,10,13,13,
91,91,1,1,10,10,2,0,9,9,32,32,194,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,
7,1,0,0,0,0,9,1,0,0,0,0,17,1,0,0,0,0,21,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,
0,0,29,1,0,0,0,0,31,1,0,0,0,1,33,1,0,0,0,3,35,1,0,0,0,5,37,1,0,0,0,7,46,
1,0,0,0,9,53,1,0,0,0,11,55,1,0,0,0,13,64,1,0,0,0,15,66,1,0,0,0,17,69,1,0,
0,0,19,80,1,0,0,0,21,88,1,0,0,0,23,104,1,0,0,0,25,106,1,0,0,0,27,114,1,0,
0,0,29,160,1,0,0,0,31,167,1,0,0,0,33,34,5,40,0,0,34,2,1,0,0,0,35,36,5,41,
0,0,36,4,1,0,0,0,37,41,7,0,0,0,38,40,7,1,0,0,39,38,1,0,0,0,40,43,1,0,0,0,
41,39,1,0,0,0,41,42,1,0,0,0,42,6,1,0,0,0,43,41,1,0,0,0,44,47,8,2,0,0,45,
47,3,9,4,0,46,44,1,0,0,0,46,45,1,0,0,0,47,48,1,0,0,0,48,46,1,0,0,0,48,49,
1,0,0,0,49,8,1,0,0,0,50,54,3,11,5,0,51,54,3,13,6,0,52,54,3,15,7,0,53,50,
1,0,0,0,53,51,1,0,0,0,53,52,1,0,0,0,54,10,1,0,0,0,55,56,5,92,0,0,56,57,8,
3,0,0,57,12,1,0,0,0,58,59,5,92,0,0,59,65,5,116,0,0,60,61,5,92,0,0,61,65,
5,114,0,0,62,63,5,92,0,0,63,65,5,110,0,0,64,58,1,0,0,0,64,60,1,0,0,0,64,
62,1,0,0,0,65,14,1,0,0,0,66,67,5,92,0,0,67,68,5,59,0,0,68,16,1,0,0,0,69,
75,5,34,0,0,70,74,8,4,0,0,71,74,3,9,4,0,72,74,3,19,9,0,73,70,1,0,0,0,73,
71,1,0,0,0,73,72,1,0,0,0,74,77,1,0,0,0,75,73,1,0,0,0,75,76,1,0,0,0,76,78,
1,0,0,0,77,75,1,0,0,0,78,79,5,34,0,0,79,18,1,0,0,0,80,86,5,92,0,0,81,83,
5,13,0,0,82,84,5,10,0,0,83,82,1,0,0,0,83,84,1,0,0,0,84,87,1,0,0,0,85,87,
5,10,0,0,86,81,1,0,0,0,86,85,1,0,0,0,87,20,1,0,0,0,88,89,5,91,0,0,89,90,
3,23,11,0,90,91,5,93,0,0,91,22,1,0,0,0,92,93,5,61,0,0,93,94,3,23,11,0,94,
95,5,61,0,0,95,105,1,0,0,0,96,100,5,91,0,0,97,99,9,0,0,0,98,97,1,0,0,0,99,
102,1,0,0,0,100,101,1,0,0,0,100,98,1,0,0,0,101,103,1,0,0,0,102,100,1,0,0,
0,103,105,5,93,0,0,104,92,1,0,0,0,104,96,1,0,0,0,105,24,1,0,0,0,106,107,
5,35,0,0,107,108,5,91,0,0,108,109,1,0,0,0,109,110,3,23,11,0,110,111,5,93,
0,0,111,112,1,0,0,0,112,113,6,12,0,0,113,26,1,0,0,0,114,144,5,35,0,0,115,
145,1,0,0,0,116,120,5,91,0,0,117,119,5,61,0,0,118,117,1,0,0,0,119,122,1,
0,0,0,120,118,1,0,0,0,120,121,1,0,0,0,121,145,1,0,0,0,122,120,1,0,0,0,123,
127,5,91,0,0,124,126,5,61,0,0,125,124,1,0,0,0,126,129,1,0,0,0,127,125,1,
0,0,0,127,128,1,0,0,0,128,130,1,0,0,0,129,127,1,0,0,0,130,134,8,5,0,0,131,
133,8,6,0,0,132,131,1,0,0,0,133,136,1,0,0,0,134,132,1,0,0,0,134,135,1,0,
0,0,135,145,1,0,0,0,136,134,1,0,0,0,137,141,8,7,0,0,138,140,8,6,0,0,139,
138,1,0,0,0,140,143,1,0,0,0,141,139,1,0,0,0,141,142,1,0,0,0,142,145,1,0,
0,0,143,141,1,0,0,0,144,115,1,0,0,0,144,116,1,0,0,0,144,123,1,0,0,0,144,
137,1,0,0,0,145,151,1,0,0,0,146,148,5,13,0,0,147,149,5,10,0,0,148,147,1,
0,0,0,148,149,1,0,0,0,149,152,1,0,0,0,150,152,7,8,0,0,151,146,1,0,0,0,151,
150,1,0,0,0,152,153,1,0,0,0,153,154,6,13,0,0,154,28,1,0,0,0,155,157,5,13,
0,0,156,158,5,10,0,0,157,156,1,0,0,0,157,158,1,0,0,0,158,161,1,0,0,0,159,
161,5,10,0,0,160,155,1,0,0,0,160,159,1,0,0,0,161,162,1,0,0,0,162,160,1,0,
0,0,162,163,1,0,0,0,163,164,1,0,0,0,164,165,6,14,0,0,165,30,1,0,0,0,166,
168,7,9,0,0,167,166,1,0,0,0,168,169,1,0,0,0,169,167,1,0,0,0,169,170,1,0,
0,0,170,171,1,0,0,0,171,172,6,15,0,0,172,32,1,0,0,0,23,0,41,46,48,53,64,
73,75,83,86,100,104,120,127,134,141,144,148,151,157,160,162,169,1,6,0,0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class CMakeLexer extends antlr4.Lexer {

    static grammarFileName = "CMake.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, "'('", "')'" ];
	static symbolicNames = [ null, null, null, "Identifier", "Unquoted_argument", 
                          "Escape_sequence", "Quoted_argument", "Bracket_argument", 
                          "Bracket_comment", "Line_comment", "Newline", 
                          "Space" ];
	static ruleNames = [ "T__0", "T__1", "Identifier", "Unquoted_argument", 
                      "Escape_sequence", "Escape_identity", "Escape_encoded", 
                      "Escape_semicolon", "Quoted_argument", "Quoted_cont", 
                      "Bracket_argument", "Bracket_arg_nested", "Bracket_comment", 
                      "Line_comment", "Newline", "Space" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.atn.PredictionContextCache());
    }
}

CMakeLexer.EOF = antlr4.Token.EOF;
CMakeLexer.T__0 = 1;
CMakeLexer.T__1 = 2;
CMakeLexer.Identifier = 3;
CMakeLexer.Unquoted_argument = 4;
CMakeLexer.Escape_sequence = 5;
CMakeLexer.Quoted_argument = 6;
CMakeLexer.Bracket_argument = 7;
CMakeLexer.Bracket_comment = 8;
CMakeLexer.Line_comment = 9;
CMakeLexer.Newline = 10;
CMakeLexer.Space = 11;



